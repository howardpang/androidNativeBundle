//apply plugin: 'maven'
apply plugin: 'maven-publish'
apply from: 'publish_lib.gradle'

ext {
    bintrayRepo = 'gradle-plugins'
    bintrayName = 'androidNativeBundle'

    publishedGroupId = 'io.github.howardpang'
    libraryName = 'androidNativeBundle'
    artifact = 'androidNativeBundle'

    libraryDescription = 'A gradle plugin that support publish c/c++ headers to \'aar\' and depend those \'aar\'.'

    siteUrl = 'https://github.com/howardpang/androidNativeBundle'
    gitUrl = 'https://github.com/howardpang/androidNativeBundle'

    libraryVersion = version

    developerId = 'howard'
    developerName = 'Howard Pang'
    developerEmail = 'howard_pang@outlook.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

task srcJar(type: Jar) {
    archiveClassifier = 'sources'
    from new File("${rootDir}/buildSrc/src")
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from 'buildSrc/build/docs/javadoc'
}

publishing {
    publications {
        mavenJar(MavenPublication) {

            File jar = new File(projectDir, "buildSrc/build/libs/buildSrc.jar")
            artifact jar
            artifact srcJar
            artifact javadocJar
            artifactId "androidNativeBundle"
            groupId publishedGroupId
            description libraryDescription

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'android native bundle')
                root.appendNode('url', gitUrl)
                root.appendNode('description', libraryDescription)

                def scm = root.appendNode('scm')
                scm.appendNode('url', gitUrl)
                scm.appendNode('connection', 'scm:git:git://github.com/howardpang/androidNativeBundle.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', licenseName)
                license.appendNode('url', licenseUrl)
                license.appendNode('distribution', 'lib')

                def developers = root.appendNode('developers')
                def nabil = developers.appendNode('developer')
                nabil.appendNode('id', developerId)
                nabil.appendNode('name', developerName)
                nabil.appendNode('email', developerEmail)
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
if (properties.getProperty('signing.password') != null) {
    signing {
        def signingPassword = properties.getProperty('signing.password')
        useInMemoryPgpKeys(new FileInputStream("${rootDir}/private.pgp").text, signingPassword)
        sign publishing.publications.mavenJar
    }
}

project.tasks.whenObjectAdded { Task t->
    if( t.class.name == "org.gradle.api.publish.maven.tasks.PublishToMavenLocal_Decorated") {
        t.doLast {
            String repoUrl = it.getMavenRepositoryLocator().getLocalMavenRepository()
            String group = it.getPublication().getGroupId()
            group = group.replace(".", File.separator)
            String artifact = it.getPublication().getArtifactId()
            String version = it.getPublication().getVersion()
            String uploadUrl = repoUrl + File.separator + group + File.separator + artifact + File.separator + version
            println("Uploading " + uploadUrl)
        }
    }else if (t.class.name == "org.gradle.api.publish.maven.tasks.PublishToMavenRepository_Decorated") {
        t.doLast {
            String repoUrl = it.getRepository().getUrl()
            String group = it.getPublication().getGroupId()
            group = group.replace(".", File.separator)
            String artifact = it.getPublication().getArtifactId()
            String version = it.getPublication().getVersion()
            String uploadUrl = repoUrl + File.separator + group + File.separator + artifact + File.separator + version
            println("Uploading " + uploadUrl)
        }
    }
}

